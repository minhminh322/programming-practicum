
package view;

import static model.PropertyChangeEnabledRaceControls.PROPERTY_DISTANCE;
import static model.PropertyChangeEnabledRaceControls.PROPERTY_MAP;
import static model.PropertyChangeEnabledRaceControls.PROPERTY_TIME;
import static model.PropertyChangeEnabledRaceControls.PROPERTY_PARTICIPANT;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.Font;
import java.awt.GridLayout;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.text.DecimalFormat;

import javax.swing.BorderFactory;
import javax.swing.JLabel;
import javax.swing.JPanel;

import model.Race;
import model.RaceParticipants;

public class RaceStatus extends JPanel implements PropertyChangeListener {

    /**
     * 
     */
    private static final long serialVersionUID = 7872728925089958093L;

    /** The separator for formatted. */
    public static final String SEPARATOR = ":";

    /** Padding for the border around the label. */
    private static final int PADDING = 2;
    /** The number of milliseconds in a second. */
    public static final int MILLIS_PER_SEC = 1000;

    /** The number of seconds in a minute. */
    public static final int SEC_PER_MIN = 60;

    /** The number of minute in a hour. */
    public static final int MIN_PER_HOUR = 60;

    /** A formatter to require at least 1 digit, leading 0. */
    public static final DecimalFormat ONE_DIGIT_FORMAT = new DecimalFormat("0");

    /** A formatter to require at least 2 digits, leading 0s. */
    public static final DecimalFormat TWO_DIGIT_FORMAT = new DecimalFormat("00");

    /** A formatter to require at least 3 digits, leading 0s. */
    public static final DecimalFormat THREE_DIGIT_FORMAT = new DecimalFormat("000");

    private static JLabel myTimerLabel;
    
    private static JLabel test;


    // private RaceParticipants part = new RaceParticipants();

    public RaceStatus() {
        // TODO Auto-generated constructor stub
        super();
        setupComponents();

        myTimerLabel = new JLabel(formatTime(0));
        test = new JLabel();

        // info();
        timer();
    }

    private void setupComponents() {
        setLayout(new GridLayout(1, 3));

        setPreferredSize(new Dimension(650, 35));
        // setBackground(Color.RED);

    }

    // private void info() {
    // test.setText("Participant: " + myRace.getRacerID());
    // add(test);
    // }

    private void timer() {
        add(myTimerLabel);
        myTimerLabel.setBorder(BorderFactory
                        .createCompoundBorder(BorderFactory.createEtchedBorder(),
                                              BorderFactory.createEmptyBorder(PADDING, PADDING,
                                                                              PADDING,
                                                                              PADDING)));

        
        add(test);
        test.setBorder(BorderFactory
                        .createCompoundBorder(BorderFactory.createEtchedBorder(),
                                              BorderFactory.createEmptyBorder(PADDING, PADDING,
                                                                              PADDING,
                                                                              PADDING)));

    }

    /**
     * This formats a positive integer into minutes, seconds, and milliseconds. 00:00:000
     * 
     * @param theTime the time to be formatted
     * @return the formated string.
     */
    public static String formatTime(final long theTime) {
        long time = theTime;
        final long milliseconds = time % MILLIS_PER_SEC;
        time /= MILLIS_PER_SEC;
        final long seconds = time % SEC_PER_MIN;
        time /= SEC_PER_MIN;
        final long min = time % MIN_PER_HOUR;
        time /= MIN_PER_HOUR;
        return TWO_DIGIT_FORMAT.format(min) + SEPARATOR + TWO_DIGIT_FORMAT.format(seconds)
               + SEPARATOR + THREE_DIGIT_FORMAT.format(milliseconds);
    }

    @Override
    public void propertyChange(final PropertyChangeEvent theEvent) {
        if (PROPERTY_TIME.equals(theEvent.getPropertyName())) {
            myTimerLabel.setText(formatTime((Integer) theEvent.getNewValue()));
//            test.setText("sad");
        }
        if (PROPERTY_MAP.equals(theEvent.getPropertyName())) {

           // System.out.println(theEvent.getNewValue());

        }
    }

}
